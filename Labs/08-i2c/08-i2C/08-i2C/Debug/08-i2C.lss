
08-i2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9c  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068f  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054c  00000000  00000000  00002a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_18>
  4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 aa 01 	call	0x354	; 0x354 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t number_of_devices;
    // FSM
    switch (state)
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	51 f1       	breq	.+84     	; 0x16a <__vector_13+0x92>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	d1 f1       	breq	.+116    	; 0x18e <__vector_13+0xb6>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_13+0x48>
 11e:	49 c0       	rjmp	.+146    	; 0x1b2 <__vector_13+0xda>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	98 0f       	add	r25, r24
 128:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
        // If slave address is between 8 and 119 then move to SEND state
		if((addr > 7) && (addr < 120))
 12c:	87 50       	subi	r24, 0x07	; 7
 12e:	80 37       	cpi	r24, 0x70	; 112
 130:	20 f4       	brcc	.+8      	; 0x13a <__vector_13+0x62>
			state = STATE_SEND;
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <__vector_13+0xe0>
		else {
			if(addr == 120){
 13a:	98 37       	cpi	r25, 0x78	; 120
 13c:	81 f4       	brne	.+32     	; 0x15e <__vector_13+0x86>
				uart_puts("Number of detected devices:  ");
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 aa 01 	call	0x354	; 0x354 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	be 01       	movw	r22, r28
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 b7 01 	call	0x36e	; 0x36e <__itoa_ncheck>
				itoa(number_of_devices, uart_string, 10);
				uart_puts(uart_string);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 aa 01 	call	0x354	; 0x354 <uart_puts>
			}
			addr = 0;
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			state = STATE_IDLE;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <__vector_13+0xe0>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	88 0f       	add	r24, r24
 170:	0e 94 01 01 	call	0x202	; 0x202 <twi_start>
 174:	18 2f       	mov	r17, r24
        twi_stop();
 176:	0e 94 1e 01 	call	0x23c	; 0x23c <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result == 0)
 17a:	11 11       	cpse	r17, r1
 17c:	04 c0       	rjmp	.+8      	; 0x186 <__vector_13+0xae>
			state = STATE_ACK;
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 184:	19 c0       	rjmp	.+50     	; 0x1b8 <__vector_13+0xe0>
		else
			state = STATE_IDLE;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 18c:	15 c0       	rjmp	.+42     	; 0x1b8 <__vector_13+0xe0>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		itoa(addr, uart_string, 16);
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	40 e1       	ldi	r20, 0x10	; 16
 194:	be 01       	movw	r22, r28
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 b7 01 	call	0x36e	; 0x36e <__itoa_ncheck>
		uart_puts(uart_string);
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 aa 01 	call	0x354	; 0x354 <uart_puts>
		uart_puts("   ");
 1a8:	8e e3       	ldi	r24, 0x3E	; 62
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 aa 01 	call	0x354	; 0x354 <uart_puts>
        break;
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <__vector_13+0xe0>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	1f 91       	pop	r17
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8f 7c       	andi	r24, 0xCF	; 207
 1e8:	87 b9       	out	0x07, r24	; 7
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	80 63       	ori	r24, 0x30	; 48
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	e9 eb       	ldi	r30, 0xB9	; 185
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8c 7f       	andi	r24, 0xFC	; 252
 1f8:	80 83       	st	Z, r24
 1fa:	88 e9       	ldi	r24, 0x98	; 152
 1fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 200:	08 95       	ret

00000202 <twi_start>:
 202:	94 ea       	ldi	r25, 0xA4	; 164
 204:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 208:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	99 23       	and	r25, r25
 20e:	e4 f7       	brge	.-8      	; 0x208 <twi_start+0x6>
 210:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 214:	84 e8       	ldi	r24, 0x84	; 132
 216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21e:	88 23       	and	r24, r24
 220:	e4 f7       	brge	.-8      	; 0x21a <twi_start+0x18>
 222:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	88 31       	cpi	r24, 0x18	; 24
 22a:	21 f0       	breq	.+8      	; 0x234 <twi_start+0x32>
 22c:	80 34       	cpi	r24, 0x40	; 64
 22e:	21 f4       	brne	.+8      	; 0x238 <twi_start+0x36>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret

0000023c <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 23c:	84 e9       	ldi	r24, 0x94	; 148
 23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 242:	08 95       	ret

00000244 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 25c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 260:	8c 71       	andi	r24, 0x1C	; 28
 262:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 266:	ef 5f       	subi	r30, 0xFF	; 255
 268:	ef 71       	andi	r30, 0x1F	; 31
 26a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 26e:	e9 17       	cp	r30, r25
 270:	39 f0       	breq	.+14     	; 0x280 <__vector_18+0x3c>
 272:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e9 5b       	subi	r30, 0xB9	; 185
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	20 83       	st	Z, r18
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__vector_18+0x3e>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 286:	89 2b       	or	r24, r25
 288:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_19>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
 2b2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 2b6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 2ba:	98 17       	cp	r25, r24
 2bc:	69 f0       	breq	.+26     	; 0x2d8 <__vector_19+0x38>
 2be:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 2c2:	ef 5f       	subi	r30, 0xFF	; 255
 2c4:	ef 71       	andi	r30, 0x1F	; 31
 2c6:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e9 59       	subi	r30, 0x99	; 153
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 81       	ld	r24, Z
 2d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <__vector_19+0x42>
 2d8:	e1 ec       	ldi	r30, 0xC1	; 193
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8f 7d       	andi	r24, 0xDF	; 223
 2e0:	80 83       	st	Z, r24
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <uart_init>:
 2f4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 2f8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 2fc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 300:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 304:	28 2f       	mov	r18, r24
 306:	39 2f       	mov	r19, r25
 308:	33 23       	and	r19, r19
 30a:	1c f4       	brge	.+6      	; 0x312 <uart_init+0x1e>
 30c:	22 e0       	ldi	r18, 0x02	; 2
 30e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 312:	90 78       	andi	r25, 0x80	; 128
 314:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 318:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 31c:	88 e9       	ldi	r24, 0x98	; 152
 31e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 328:	08 95       	ret

0000032a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 32a:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 332:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 336:	29 17       	cp	r18, r25
 338:	e1 f3       	breq	.-8      	; 0x332 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 33a:	e2 2f       	mov	r30, r18
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e9 59       	subi	r30, 0x99	; 153
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 344:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 62       	ori	r24, 0x20	; 32
 350:	80 83       	st	Z, r24
 352:	08 95       	ret

00000354 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
    while (*s)
 35a:	03 c0       	rjmp	.+6      	; 0x362 <uart_puts+0xe>
        uart_putc(*s++);
 35c:	21 96       	adiw	r28, 0x01	; 1
 35e:	0e 94 95 01 	call	0x32a	; 0x32a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 362:	88 81       	ld	r24, Y
 364:	81 11       	cpse	r24, r1
 366:	fa cf       	rjmp	.-12     	; 0x35c <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <__itoa_ncheck>:
 36e:	bb 27       	eor	r27, r27
 370:	4a 30       	cpi	r20, 0x0A	; 10
 372:	31 f4       	brne	.+12     	; 0x380 <__itoa_ncheck+0x12>
 374:	99 23       	and	r25, r25
 376:	22 f4       	brpl	.+8      	; 0x380 <__itoa_ncheck+0x12>
 378:	bd e2       	ldi	r27, 0x2D	; 45
 37a:	90 95       	com	r25
 37c:	81 95       	neg	r24
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	0c 94 c3 01 	jmp	0x386	; 0x386 <__utoa_common>

00000384 <__utoa_ncheck>:
 384:	bb 27       	eor	r27, r27

00000386 <__utoa_common>:
 386:	fb 01       	movw	r30, r22
 388:	55 27       	eor	r21, r21
 38a:	aa 27       	eor	r26, r26
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	aa 1f       	adc	r26, r26
 392:	a4 17       	cp	r26, r20
 394:	10 f0       	brcs	.+4      	; 0x39a <__utoa_common+0x14>
 396:	a4 1b       	sub	r26, r20
 398:	83 95       	inc	r24
 39a:	50 51       	subi	r21, 0x10	; 16
 39c:	b9 f7       	brne	.-18     	; 0x38c <__utoa_common+0x6>
 39e:	a0 5d       	subi	r26, 0xD0	; 208
 3a0:	aa 33       	cpi	r26, 0x3A	; 58
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <__utoa_common+0x20>
 3a4:	a9 5d       	subi	r26, 0xD9	; 217
 3a6:	a1 93       	st	Z+, r26
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	79 f7       	brne	.-34     	; 0x38a <__utoa_common+0x4>
 3ac:	b1 11       	cpse	r27, r1
 3ae:	b1 93       	st	Z+, r27
 3b0:	11 92       	st	Z+, r1
 3b2:	cb 01       	movw	r24, r22
 3b4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <strrev>

000003b8 <strrev>:
 3b8:	dc 01       	movw	r26, r24
 3ba:	fc 01       	movw	r30, r24
 3bc:	67 2f       	mov	r22, r23
 3be:	71 91       	ld	r23, Z+
 3c0:	77 23       	and	r23, r23
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <strrev+0x4>
 3c4:	32 97       	sbiw	r30, 0x02	; 2
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <strrev+0x18>
 3c8:	7c 91       	ld	r23, X
 3ca:	6d 93       	st	X+, r22
 3cc:	70 83       	st	Z, r23
 3ce:	62 91       	ld	r22, -Z
 3d0:	ae 17       	cp	r26, r30
 3d2:	bf 07       	cpc	r27, r31
 3d4:	c8 f3       	brcs	.-14     	; 0x3c8 <strrev+0x10>
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
