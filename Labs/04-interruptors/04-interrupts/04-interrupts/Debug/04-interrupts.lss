
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b29  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 00 	call	0x106	; 0x106 <main>
  78:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_nopull>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_nopull+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_nopull+0xa>
  aa:	20 95       	com	r18
  ac:	82 23       	and	r24, r18
  ae:	80 83       	st	Z, r24
  b0:	81 81       	ldd	r24, Z+1	; 0x01
  b2:	28 23       	and	r18, r24
  b4:	21 83       	std	Z+1, r18	; 0x01
  b6:	08 95       	ret

000000b8 <GPIO_write_low>:
  b8:	fc 01       	movw	r30, r24
  ba:	90 81       	ld	r25, Z
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_write_low+0xe>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_write_low+0xa>
  ca:	20 95       	com	r18
  cc:	29 23       	and	r18, r25
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <GPIO_write_high>:
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_write_high+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_write_high+0xa>
  e4:	24 2b       	or	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <GPIO_read>:
/**********************************************************************
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if (bit_is_set(*reg_name, pin_num))
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <GPIO_read+0xc>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <GPIO_read+0x8>
  fa:	80 ff       	sbrs	r24, 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <GPIO_read+0x18>
	{
		return 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
	}
	else
	{
		return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
	}
 104:	08 95       	ret

00000106 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
 106:	65 e0       	ldi	r22, 0x05	; 5
 108:	84 e2       	ldi	r24, 0x24	; 36
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
 110:	65 e0       	ldi	r22, 0x05	; 5
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D2);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D2);
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D3);
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	84 e2       	ldi	r24, 0x24	; 36
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D3);
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	85 e2       	ldi	r24, 0x25	; 37
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	
	GPIO_config_output(&DDRB, LED_D4);
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D4);   
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	
	//Configuration of the push button
	GPIO_config_input_nopull(&DDRC,BUTTON_S1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	87 e2       	ldi	r24, 0x27	; 39
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_nopull>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 160:	e1 e8       	ldi	r30, 0x81	; 129
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	80 83       	st	Z, r24
 16a:	80 81       	ld	r24, Z
 16c:	83 60       	ori	r24, 0x03	; 3
 16e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 170:	ef e6       	ldi	r30, 0x6F	; 111
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 17a:	78 94       	sei
    // Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively
         * inside interrupt service routines ISRs */
		if (GPIO_read(&PINC, BUTTON_S1) == 0)
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	86 e2       	ldi	r24, 0x26	; 38
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 75 00 	call	0xea	; 0xea <GPIO_read>
 186:	81 11       	cpse	r24, r1
 188:	09 c0       	rjmp	.+18     	; 0x19c <main+0x96>
		{
			TIM1_overflow_33ms();
 18a:	e1 e8       	ldi	r30, 0x81	; 129
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8a 7f       	andi	r24, 0xFA	; 250
 192:	80 83       	st	Z, r24
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
 19a:	f0 cf       	rjmp	.-32     	; 0x17c <main+0x76>
		}
		else
		{
			TIM1_overflow_262ms();
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	80 83       	st	Z, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	80 83       	st	Z, r24
 1ac:	e7 cf       	rjmp	.-50     	; 0x17c <main+0x76>

000001ae <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	GPIO_write_high(&PORTB, LED_D1);
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	85 e2       	ldi	r24, 0x25	; 37
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_high>
	GPIO_write_low(&PORTB, LED_D1);
 1da:	65 e0       	ldi	r22, 0x05	; 5
 1dc:	85 e2       	ldi	r24, 0x25	; 37
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	TIMER1_OVF_vect();
 1e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__vector_13>
	GPIO_write_high(&PORTB, LED_D2);
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	85 e2       	ldi	r24, 0x25	; 37
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_high>
	GPIO_write_low(&PORTB, LED_D2);
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	85 e2       	ldi	r24, 0x25	; 37
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	TIMER1_OVF_vect();
 1fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__vector_13>
	GPIO_write_high(&PORTB, LED_D3);
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_high>
	GPIO_write_low(&PORTB, LED_D3);
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	TIMER1_OVF_vect();
 214:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__vector_13>
	GPIO_write_high(&PORTB, LED_D4);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_write_high>
	GPIO_write_low(&PORTB, LED_D4);
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>
	TIMER1_OVF_vect();
 22c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__vector_13>
    // WRITE YOUR CODE HERE
	
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
